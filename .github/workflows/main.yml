name: CI — Build & Push to ECR and scan

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  sonar:
    name: SonarCloud — Code Quality Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=./app

  sonar-quality-gate:
    name: SonarCloud — Wait for Quality Gate
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - name: Wait for SonarCloud Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          echo "Polling SonarCloud for quality gate status..."
          for i in $(seq 1 20); do
            resp=$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}")
            status=$(echo "$resp" | jq -r '.projectStatus.status')
            echo "Attempt $i — status: $status"
            if [ "$status" = "OK" ]; then
              echo "Quality Gate = OK"
              exit 0
            fi
            if [ "$status" = "ERROR" ]; then
              echo "Quality Gate = ERROR"
              echo "$resp" | jq .
              exit 1
            fi
            sleep 6
          done
          echo "Timed out waiting for SonarCloud quality gate."
          exit 1

  build-and-push:
    runs-on: ubuntu-latest
    needs: sonar-quality-gate
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push app image to ECR
        uses: docker/build-push-action@v4
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
